From 5ef06df0dd944a06febb3d93217e4223aec4893e Mon Sep 17 00:00:00 2001
From: David Li <li.davidm96@gmail.com>
Date: Thu, 10 Feb 2022 09:01:56 -0500
Subject: [PATCH] ARROW-15551: [C++][FlightRPC] Update gRPC TLS options
 detection for 1.43

---
 cpp/src/arrow/flight/CMakeLists.txt           |  5 ++
 cpp/src/arrow/flight/client.cc                | 47 +++++++++++++++----
 .../flight/try_compile/check_tls_opts_143.cc  | 37 +++++++++++++++
 3 files changed, 79 insertions(+), 10 deletions(-)
 create mode 100644 cpp/src/arrow/flight/try_compile/check_tls_opts_143.cc

diff --git a/cpp/src/arrow/flight/CMakeLists.txt b/cpp/src/arrow/flight/CMakeLists.txt
index 2cf8c99..2f273ee 100644
--- a/cpp/src/arrow/flight/CMakeLists.txt
+++ b/cpp/src/arrow/flight/CMakeLists.txt
@@ -119,6 +119,7 @@ if(GRPC_VENDORED)
   # v1.35.0 -> 1.35
   string(REGEX MATCH "[0-9]+\\.[0-9]+" GRPC_VERSION "${ARROW_GRPC_BUILD_VERSION}")
 else()
+  test_grpc_version(GRPC_VERSION "1.43" "check_tls_opts_143.cc")
   test_grpc_version(GRPC_VERSION "1.36" "check_tls_opts_136.cc")
   test_grpc_version(GRPC_VERSION "1.34" "check_tls_opts_134.cc")
   test_grpc_version(GRPC_VERSION "1.32" "check_tls_opts_132.cc")
@@ -137,6 +138,10 @@ elseif(GRPC_VERSION EQUAL "1.34" OR GRPC_VERSION EQUAL "1.35")
 elseif(GRPC_VERSION EQUAL "1.36")
   add_definitions(-DGRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS
                   -DGRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS=grpc::experimental)
+elseif(GRPC_VERSION EQUAL "1.43")
+  add_definitions(-DGRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS
+                  -DGRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS=grpc::experimental
+                  -DGRPC_USE_CERTIFICATE_VERIFIER)
 else()
   message(STATUS "A proper version of gRPC could not be found to support TlsCredentialsOptions in Arrow Flight."
   )
diff --git a/cpp/src/arrow/flight/client.cc b/cpp/src/arrow/flight/client.cc
index f9728f8..b91dddf 100644
--- a/cpp/src/arrow/flight/client.cc
+++ b/cpp/src/arrow/flight/client.cc
@@ -930,8 +930,25 @@ class FlightClient::FlightClientImpl {
 #if defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS)
           namespace ge = GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS;
 
-          // A callback to supply to TlsCredentialsOptions that accepts any server
-          // arguments.
+#if defined(GRPC_USE_CERTIFICATE_VERIFIER)
+          // gRPC >= 1.43
+          class NoOpCertificateVerifier : public ge::ExternalCertificateVerifier {
+           public:
+            bool Verify(ge::TlsCustomVerificationCheckRequest*,
+                        std::function<void(grpc::Status)>,
+                        grpc::Status* sync_status) override {
+              *sync_status = grpc::Status::OK;
+              return true;  // Check done synchronously
+            }
+            void Cancel(ge::TlsCustomVerificationCheckRequest*) override {}
+          };
+          auto cert_verifier =
+              ge::ExternalCertificateVerifier::Create<NoOpCertificateVerifier>();
+
+#else   // defined(GRPC_USE_CERTIFICATE_VERIFIER)
+        // gRPC < 1.43
+        // A callback to supply to TlsCredentialsOptions that accepts any server
+        // arguments.
           struct NoOpTlsAuthorizationCheck
               : public ge::TlsServerAuthorizationCheckInterface {
             int Schedule(ge::TlsServerAuthorizationCheckArg* arg) override {
@@ -943,6 +960,8 @@ class FlightClient::FlightClientImpl {
           auto server_authorization_check = std::make_shared<NoOpTlsAuthorizationCheck>();
           noop_auth_check_ = std::make_shared<ge::TlsServerAuthorizationCheckConfig>(
               server_authorization_check);
+#endif  // defined(GRPC_USE_CERTIFICATE_VERIFIER)
+
 #if defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS)
           auto certificate_provider =
               std::make_shared<grpc::experimental::StaticDataCertificateProvider>(
@@ -950,31 +969,38 @@ class FlightClient::FlightClientImpl {
 #if defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS_ROOT_CERTS)
           grpc::experimental::TlsChannelCredentialsOptions tls_options(
               certificate_provider);
-#else
-          // While gRPC >= 1.36 does not require a root cert (it has a default)
-          // in practice the path it hardcodes is broken. See grpc/grpc#21655.
+#else   // defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS_ROOT_CERTS)
+        // While gRPC >= 1.36 does not require a root cert (it has a default)
+        // in practice the path it hardcodes is broken. See grpc/grpc#21655.
           grpc::experimental::TlsChannelCredentialsOptions tls_options;
           tls_options.set_certificate_provider(certificate_provider);
-#endif
+#endif  // defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS_ROOT_CERTS)
           tls_options.watch_root_certs();
           tls_options.set_root_cert_name("dummy");
+#if defined(GRPC_USE_CERTIFICATE_VERIFIER)
+          tls_options.set_certificate_verifier(std::move(cert_verifier));
+          tls_options.set_check_call_host(false);
+          tls_options.set_verify_server_certs(false);
+#else   // defined(GRPC_USE_CERTIFICATE_VERIFIER)
           tls_options.set_server_verification_option(
               grpc_tls_server_verification_option::GRPC_TLS_SKIP_ALL_SERVER_VERIFICATION);
           tls_options.set_server_authorization_check_config(noop_auth_check_);
+#endif  // defined(GRPC_USE_CERTIFICATE_VERIFIER)
 #elif defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS)
+          // continues defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS)
           auto materials_config = std::make_shared<ge::TlsKeyMaterialsConfig>();
           materials_config->set_pem_root_certs(kDummyRootCert);
           ge::TlsCredentialsOptions tls_options(
               GRPC_SSL_DONT_REQUEST_CLIENT_CERTIFICATE,
               GRPC_TLS_SKIP_ALL_SERVER_VERIFICATION, materials_config,
               std::shared_ptr<ge::TlsCredentialReloadConfig>(), noop_auth_check_);
-#endif
+#endif  // defined(GRPC_USE_TLS_CHANNEL_CREDENTIALS_OPTIONS)
           creds = ge::TlsCredentials(tls_options);
-#else
+#else   // defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS)
           return Status::NotImplemented(
               "Using encryption with server verification disabled is unsupported. "
               "Please use a release of Arrow Flight built with gRPC 1.27 or higher.");
-#endif
+#endif  // defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS)
         } else {
           grpc::SslCredentialsOptions ssl_options;
           if (!options.tls_root_certs.empty()) {
@@ -1261,7 +1287,8 @@ class FlightClient::FlightClientImpl {
  private:
   std::unique_ptr<pb::FlightService::Stub> stub_;
   std::shared_ptr<ClientAuthHandler> auth_handler_;
-#if defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS)
+#if defined(GRPC_NAMESPACE_FOR_TLS_CREDENTIALS_OPTIONS) && \
+    !defined(GRPC_USE_CERTIFICATE_VERIFIER)
   // Scope the TlsServerAuthorizationCheckConfig to be at the class instance level, since
   // it gets created during Connect() and needs to persist to DoAction() calls. gRPC does
   // not correctly increase the reference count of this object:
diff --git a/cpp/src/arrow/flight/try_compile/check_tls_opts_143.cc b/cpp/src/arrow/flight/try_compile/check_tls_opts_143.cc
new file mode 100644
index 0000000..2fdaac9
--- /dev/null
+++ b/cpp/src/arrow/flight/try_compile/check_tls_opts_143.cc
@@ -0,0 +1,37 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//   http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing,
+// software distributed under the License is distributed on an
+// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied.  See the License for the
+// specific language governing permissions and limitations
+// under the License.
+
+// Dummy file for checking if TlsCredentialsOptions supports
+// set_verify_server_certs. gRPC starting from 1.43 added this boolean
+// flag as opposed to prior versions which used an enum. This is for
+// supporting disabling server validation when using TLS.
+
+#include <grpc/grpc_security_constants.h>
+#include <grpcpp/grpcpp.h>
+#include <grpcpp/security/tls_credentials_options.h>
+
+static void check() {
+  // 1.36 uses an enum; 1.43 uses booleans
+  auto options = std::make_shared<grpc::experimental::TlsChannelCredentialsOptions>();
+  options->set_check_call_host(false);
+  options->set_verify_server_certs(false);
+}
+
+int main(int argc, const char** argv) {
+  check();
+  return 0;
+}
-- 
2.32.0 (Apple Git-132)

