{% set version = "0.17.1" %}
{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '9.2' %}
{% set build_ext_version = "1.0.0" %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set proc_build_number = "1" %}

package:
  name: arrow-cpp-ext
  version: {{ version }}

source:
  url: http://archive.apache.org/dist/arrow/arrow-{{ version }}/apache-arrow-{{ version }}.tar.gz
  sha256: cbc51c343bca08b10f7f1b2ef15cb15057c30e5e9017cfcee18337b7e2da9ea2
  patches:
    - 5f25358faaa52738320439e3242ab316204cd3be.patch
    - a3e7185abdcea52aedec2b10b19776307eb98a64.patch
    - support-grpc-1.34.patch

build:
  number: 22
  skip: true  # [cuda_compiler_version not in (undefined, "None", "9.2")]
  run_exports:
    - {{ pin_subpackage("arrow-cpp", max_pin="x.x.x") }}

outputs:
  - name: arrow-cpp-proc
    version: {{ build_ext_version }}
    build:
      number: {{ proc_build_number }}
      string: "{{ build_ext }}"
    test:
      commands:
        - exit 0
    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: 'A meta-package to select Arrow build variant'

  - name: arrow-cpp
    script: build-arrow.sh  # [not win]
    script: bld-arrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      skip: true  # [cuda_compiler_version not in (undefined, "None", "9.2")]
      run_exports:
        - {{ pin_subpackage("arrow-cpp", max_pin="x.x.x") }}
      ignore_run_exports:
        - cudatoolkit
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - gnuconfig                              # [osx and arm64]
        - libprotobuf
        - grpc-cpp
        - cmake
        - autoconf  # [unix]
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
      host:
        - aws-sdk-cpp
        - boost-cpp
        - brotli
        - bzip2
        - c-ares
        - gflags
        - glog
        - grpc-cpp
        - libprotobuf
        - clangdev 8.*  # [not (osx and arm64)]
        - llvmdev 8.*   # [not (osx and arm64)]
        # Only newer Arrow releases support 1.9.3+
        - lz4-c 1.9.2  # [win]
        - lz4-c        # [not win]
        - numpy
        - orc  # [unix]
        - python
        - rapidjson
        - re2
        - snappy
        - thrift-cpp >=0.11
        - zlib
        - zstd
      run:
        - {{ pin_compatible('numpy') }}
        - python
      run_constrained:
        - arrow-cpp-proc * {{ build_ext }}
        - cudatoolkit >=9.2  # [cuda_compiler_version not in (undefined, "None")]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: C++ libraries for Apache Arrow

    test:
      commands:
        # headers
        - test -f $PREFIX/include/arrow/api.h              # [unix]
        - test -f $PREFIX/include/arrow/flight/types.h     # [unix]
        - test -f $PREFIX/include/plasma/client.h          # [unix]
        - test -f $PREFIX/include/gandiva/engine.h         # [unix and not (osx and arm64)]
        - test -f $PREFIX/include/parquet/api/reader.h     # [unix]
        - if not exist %LIBRARY_INC%\\arrow\\api.h exit 1            # [win]
        - if not exist %LIBRARY_INC%\\gandiva\\engine.h exit 1       # [win]
        - if not exist %LIBRARY_INC%\\parquet\\api\\reader.h exit 1  # [win]

        # shared
        - test -f $PREFIX/lib/libarrow.so            # [linux]
        - test -f $PREFIX/lib/libarrow_dataset.so    # [linux]
        - test -f $PREFIX/lib/libarrow_flight.so     # [linux]
        - test -f $PREFIX/lib/libarrow_python.so     # [linux]
        - test -f $PREFIX/lib/libparquet.so          # [linux]
        - test -f $PREFIX/lib/libgandiva.so          # [linux]
        - test -f $PREFIX/lib/libplasma.so           # [linux]
        {{ "- test %s -f $PREFIX/lib/libarrow_cuda.so" % (['!', ''][cuda_enabled]) }}                         # [linux]
        {{ "- test %s -f $PREFIX/lib/libarrow_cuda.dylib" % (['!', ''][cuda_enabled]) }}                      # [osx]
        {{ "- if %s exist %%PREFIX%%\\Library\\bin\\arrow_cuda.dll exit 1" % (['', 'not'][cuda_enabled]) }}   # [win]
        - test -f $PREFIX/lib/libarrow.dylib          # [osx]
        - test -f $PREFIX/lib/libarrow_dataset.dylib  # [osx]
        - test -f $PREFIX/lib/libarrow_python.dylib   # [osx]
        - test -f $PREFIX/lib/libgandiva.dylib        # [osx and not arm64]
        - test -f $PREFIX/lib/libparquet.dylib        # [osx]
        - test -f $PREFIX/lib/libplasma.dylib         # [osx]
        - if not exist %PREFIX%\\Library\\bin\\arrow.dll exit 1          # [win]
        - if not exist %PREFIX%\\Library\\bin\\arrow_dataset.dll exit 1  # [win]
        - if not exist %PREFIX%\\Library\\bin\\arrow_flight.dll exit 1   # [win]
        - if not exist %PREFIX%\\Library\\bin\\arrow_python.dll exit 1   # [win]
        - if not exist %PREFIX%\\Library\\bin\\parquet.dll exit 1        # [win]
        - if not exist %PREFIX%\\Library\\bin\\gandiva.dll exit 1        # [win]

        # absence of static libraries
        - test ! -f $PREFIX/lib/libarrow.a          # [unix]
        - test ! -f $PREFIX/lib/libarrow_dataset.a  # [unix]
        - test ! -f $PREFIX/lib/libarrow_flight.a   # [unix]
        - test ! -f $PREFIX/lib/libarrow_python.a   # [unix]
        - test ! -f $PREFIX/lib/libplasma.a         # [unix]
        - test ! -f $PREFIX/lib/libparquet.a        # [unix]
        - test ! -f $PREFIX/lib/libgandiva.a        # [unix]
        - if exist %PREFIX%\\Library\\lib\\arrow_static.lib exit 1          # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_dataset_static.lib exit 1  # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_flight_static.lib exit 1   # [win]
        - if exist %PREFIX%\\Library\\lib\\arrow_python_static.lib exit 1   # [win]
        - if exist %PREFIX%\\Library\\lib\\parquet_static.lib exit 1        # [win]
        - if exist %PREFIX%\\Library\\lib\\gandiva_static.lib exit 1        # [win]

  - name: pyarrow
    script: build-pyarrow.sh  # [not win]
    script: bld-pyarrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      skip: true  # [cuda_compiler_version not in (undefined, "None", "9.2")]
      ignore_run_exports:
        - cudatoolkit
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cmake
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # pyarrow does not require nvcc but it needs to link against libraries in arrow-cpp=*=*cuda
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
      host:
        - {{ pin_subpackage('arrow-cpp', exact=True) }}
        - boost-cpp
        - cython
        - numpy
        - python
        - setuptools
        - setuptools_scm
        - six
      run:
        - {{ pin_subpackage('arrow-cpp', exact=True) }}
        - {{ pin_compatible('numpy') }}
        - boost-cpp
        - glog
        - pandas
        # empty parquet-cpp metapackage, force old versions to be uninstalled
        - parquet-cpp 1.5.1.*
        - python
        - six
      run_constrained:
        - arrow-cpp-proc * {{ build_ext }}
        - cudatoolkit >=9.2  # [cuda_compiler_version not in (undefined, "None")]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: Python libraries for Apache Arrow

    test:
      imports:
        - pyarrow
        - pyarrow.dataset
        - pyarrow.flight
        - pyarrow.gandiva  # [not (osx and arm64)]
        - pyarrow.orc      # [unix]
        - pyarrow.parquet
        - pyarrow.plasma   # [unix]
        - pyarrow.fs
        - pyarrow._s3fs
        - pyarrow._hdfs
        # We can only test importing cuda package but cannot run when a
        # CUDA device is not available, for instance, when building from CI.
        - pyarrow.cuda     # [cuda_compiler_version not in (undefined, "None")]

about:
  home: http://github.com/apache/arrow
  license: Apache-2.0
  license_file:
    - LICENSE.txt
  summary: C++ and Python libraries for Apache Arrow

extra:
  recipe-maintainers:
    - wesm
    - xhochy
    - leifwalsh
    - jreback
    - cpcloud
    - pcmoritz
    - robertnishihara
    - siddharthteotia
    - kou
    - kszucs
    - pitrou
    - pearu
    - nealrichardson
    - jakirkham
